{"version":3,"sources":["../es6/validate.js"],"names":[],"mappings":";;;;;qBAAwB,QAAQ;;AAAjB,SAAS,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE;;;;;;;AAOxD,MAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,SAAS;WAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;GAAA,CAAC,CAChE,GAAG,CAAC,UAAA,SAAS,EAAI;AAChB,WAAO;AACL,UAAI,EAAE,SAAS,CAAC,IAAI;AACpB,SAAG,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3B,QAAE,EAAE,SAAS,CAAC,EAAE;KACjB,CAAA;GACF,CAAC,CACD,MAAM,CAAC,UAAA,SAAS;WAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC;GAAA,CAAC,CACtD,GAAG,CAAC,UAAA,SAAS,EAAI;AAChB,WAAO;AACL,eAAS,EAAE,SAAS,CAAC,IAAI;AACzB,kBAAY,EAAE,SAAS,CAAC,GAAG;AAC3B,eAAS,EAAE,GAAG;KACf,CAAA;GACF,CAAC,CAAC;;;AAGL,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;;AAEzD,SAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;CACxB","file":"es6/validate.js","sourcesContent":["export default function validate(validators, schema, val) {\n\n  /**\n   * validator: {name, fn}\n   * schema: {field, type, ....}\n   */\n\n  let failed = validators.filter(validator => schema[validator.name])\n    .map(validator => {\n      return {\n        name: validator.name,\n        val: schema[validator.name],\n        fn: validator.fn\n      }\n    })\n    .filter(validator => !validator.fn(val, validator.val))\n    .map(validator => {\n      return {\n        validator: validator.name,\n        validatorVal: validator.val,\n        actualVal: val\n      }\n    });\n\n  // always at least one validator (type)\n  let valid = failed.length === 0 && validators.length > 0;\n\n  return [valid, failed];\n}\n"]}