{"version":3,"sources":["../es6/createSchema.js"],"names":[],"mappings":"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","file":"es6/createSchema.js","sourcesContent":["import validateSchema from './validateSchema';\nimport addValidators from './addValidators';\nimport validate from './validate';\nimport ef from 'simple-error-factory';\nimport {isDefined} from 'js-type-check';\nimport {find} from 'ramda';\n\nconst ValidationError = ef('validation');\n\nexport default function createSchema(schema, additionalValidators) {\n  /**\n   * @param {Array} schema - list of {type,field}\n   * @param {Array} validators - OPTIONAL list of {type,name,fn}\n   * @returns {function} fn(obj) => matches schema\n   */\n\n  // throws if schema or additional validators invalid\n  validateSchema(schema);\n  const schemaValidators = addValidators(additionalValidators);\n\n  schema.forEach(s => {\n    s.validator = s.type.prototype.constructor.name.toLowerCase();\n  });\n\n  let required = schema.filter(s => s.required).map(s => s.field);\n  let defaults = schema.filter(s => s.default).map(s => s.field);\n  let fields = schema.map(s => s.field);\n\n  return function(obj, update) {\n\n    let missing = required.filter(r => obj[r]).length !== required.length;\n\n    if (missing && !update) {\n      return ValidationError('Missing a required field');\n    }\n\n    let keys = Object.keys(obj);\n    let invalidKeys = keys.filter(prop => {\n      // undefined if not found\n      return !find(field => field === prop, fields);\n    });\n\n    if (invalidKeys.length > 0) {\n      return ValidationError(`Invalid fields(s): ${invalidKeys}`);\n    }\n\n    let failed = [];\n    schema.forEach(s => {\n\n      let val = obj[s.field];\n\n      // only validate a field with a value\n      if (isDefined(val)) {\n\n        let validators = schemaValidators.filter(v => v.type === s.validator);\n        let [valid, failures] = validate(validators, s, val);\n        \n        failures.forEach(failure => failed.push(failure));\n      } else if (s.default) {\n        obj[s.field] = s.default;\n      }\n\n    });\n    \n    let err = ValidationError('Failed validation', {failed});\n\n    return failed.length > 0 ? err : obj;\n\n  }\n\n}\n"]}