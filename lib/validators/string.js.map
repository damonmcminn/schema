{"version":3,"sources":["../../es6/validators/string.js"],"names":[],"mappings":";;;;;;;;yBAAsB,aAAa;;;;4BACV,sBAAsB;;;;iBACjC,aAAa;;;;AAE3B,IAAM,WAAW,GAAG,0BAAa,QAAQ,CAAC,CAAC;;AAE3C,IAAM,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;qBAEf,UAAS,MAAM,EAAE,GAAG,EAAE;;AAEnC,MAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;AAE5B,MAAI,CAAC,eAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;AACpB,WAAO,IAAI,SAAS,MAAI,GAAG,aAAQ,MAAM,CAAC,IAAI,CAAG,CAAC;GACnD;;AAED,MAAI,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC9B,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAChB,SAAO,EAAE,CAAC;CAEX","file":"es6/validators/string.js","sourcesContent":["import getFields from './getFields';\nimport ErrorFactory from 'simple-error-factory';\nimport v from 'validate.js';\n\nconst NumberError = ErrorFactory('number');\n\nconst fields = ['min', 'max'];\n\nexport default function(schema, doc) {\n\n  let val = doc[schema.field];\n\n  if (!v.isString(val)) {\n    return new TypeError(`${val} not ${schema.type}`);\n  }\n  \n  let xs = main(fields, schema);\n  console.log(xs);\n  return xs;\n\n}\n"]}