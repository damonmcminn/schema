{"version":3,"sources":["../es6/NoSQLSchema.js"],"names":[],"mappings":"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","file":"es6/NoSQLSchema.js","sourcesContent":["import {install} from 'source-map-support';\ninstall();\n\nimport v from 'validate.js';\nimport ErrorFactory from 'simple-error-factory';\nimport R from 'ramda';\nimport validators from './validators';\n\nconst ValidationError = ErrorFactory('validation');\nconst SchemaError = ErrorFactory('schema');\n\nexport default function createSchemaValidator(schema) {\n\n  if (!v.isArray(schema)) {\n    throw SchemaError('Array of schema objects is required');\n  }\n\n  let badSchema;\n  schema.forEach(s => {\n    if (Object.keys(s).length === 0) {\n      badSchema = 'Schema objects cannot be empty';\n    } else if (!s.type && !s.field) {\n      badSchema = 'Missing field and type from schema object';\n    } else if (!s.type) {\n      badSchema = 'Missing type from schema object';\n    } else if (!s.field) {\n      badSchema = 'Missing field from schema object';\n    }\n  });\n\n  if (!!badSchema) {\n    throw SchemaError(badSchema, {schema});\n  }\n\n  let typedSchema = schema.map(x => {\n    x.type = x.type.name;\n    return x;\n  });\n\n  let stringValidators = ['min', 'max'];\n  // now add validators to extra validation list e.g. min,max\n\n\n  let find = function(field) {\n    return R.find(R.propEq('field', field), typedSchema);\n  };\n\n  let error = null;\n\n  let required = typedSchema.filter(x => x.required)\n    .map(x => x.field);\n\n  let defaults = typedSchema.filter(x => x.default);\n\n  return function(doc) {\n\n    if (!doc || !v.isObject(doc) || Object.keys(doc).length === 0) {\n      return ValidationError(`Invalid document`);\n    }\n\n    let keys = Object.keys(doc);\n    let d = keys.map(key => [key, doc[key]]);\n\n    for (let [key, val] of d) {\n\n      let fieldSchema = find(key);\n      let valType = val.constructor.name; // what if custom constructor?\n      let fieldType = fieldSchema ? fieldSchema.type: null;\n\n      if (!fieldSchema) {\n        error = `${key} not present in schema`;\n      } else if (valType !== fieldType) {\n        error = `${key} should be ${fieldType} not ${valType}`;\n      }\n    }\n\n    required.forEach(function(r) {\n      if (keys.indexOf(r) === -1) {\n        error = `${r} is a required field`;\n      }\n    });\n\n    defaults.forEach(function(d) {\n      if (!doc[d.field]) {\n        doc[d.field] = d.default;\n      }\n    });\n\n    return error ? ValidationError(error, {typedSchema}) : doc;\n  }\n}\n"]}