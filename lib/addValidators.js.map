{"version":3,"sources":["../es6/addValidators.js"],"names":[],"mappings":";;;;;;;qBAGwB,aAAa;;8BAHV,kBAAkB;;;;sBACzB,eAAe;;IAAvB,EAAE;;AAEC,SAAS,aAAa,CAAC,UAAU,EAAE;;AAEhD,MAAI,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAI,SAAS,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAC5C,MAAI,cAAc,YAAA,CAAC;AACnB,MAAI,KAAK,YAAA,CAAC;;AAEV,MAAI,OAAO,EAAE;AACX,SAAK,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC,EAAI;AAC7B,aAAO,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IACxB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IACpB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC3B,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;GACjB;;AAED,MAAI,CAAC,SAAS,EAAE;AACd,uCAAsB;GACvB,MAAM,IAAI,KAAK,EAAE;AAChB,cAAU,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACtB,OAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;KAC1D,CAAC,CAAC;AACH,WAAO,4BAAe,MAAM,CAAC,UAAU,CAAC,CAAC;GAC1C,MAAM;AACL,UAAM,IAAI,SAAS,CAAC,2CAA2C,CAAC,CAAC;GAClE;CAEF","file":"es6/addValidators.js","sourcesContent":["import typeValidators from './typeValidators';\nimport * as tc from 'js-type-check';\n\nexport default function addValidators(additional) {\n\n  let isArray = tc.isArray(additional);\n  let isDefined = !tc.isUndefined(additional);\n  let invalidObjects;\n  let valid;\n\n  if (isArray) {\n    valid = additional.filter(x => {\n      return !tc.isFunction(x.type)\n        || !tc.isString(x.name)\n        || !tc.isFunction(x.fn);\n    }).length === 0;\n  }\n\n  if (!isDefined) {\n    return typeValidators;\n  } else if (valid) {\n    additional.forEach(a => {\n      a.type = a.type.prototype.constructor.name.toLowerCase();\n    });\n    return typeValidators.concat(additional);\n  } else {\n    throw new TypeError('A validator is not in form {type,name,fn}');\n  }\n\n}\n"]}