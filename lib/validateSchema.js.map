{"version":3,"sources":["../es6/validateSchema.js"],"names":[],"mappings":";;;;;;;qBAKwB,cAAc;;gCALN,eAAe;;4BACtB,sBAAsB;;;;AAE/C,IAAM,WAAW,GAAG,0BAAa,QAAQ,CAAC,CAAC;;AAE5B,SAAS,cAAc,CAAC,MAAM,EAAE;;;;;;;AAQ7C,MAAI,CAAC,kBAbC,OAAO,CAaA,MAAM,CAAC,EAAE;AACpB,UAAM,IAAI,SAAS,EAAA,CAAC;GACrB;;AAED,MAAI,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC;WAAI,kBAjBrB,QAAQ,CAiBsB,CAAC,CAAC;GAAA,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC;;AAE1E,MAAI,UAAU,EAAE;AACd,UAAM,IAAI,SAAS,EAAA,CAAC;GACrB;;;;AAID,MAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,EAAI;AAC/B,WAAO,AAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,IAAK,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,WAAQ,CAAA,AAAC,CAAC;GAC1D,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC;;AAE5B,MAAI,OAAO,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAClC,UAAM,WAAW,CAAC,gBAAgB,CAAC,CAAC;GACrC;;AAED,SAAO,IAAI,CAAC;CACb","file":"es6/validateSchema.js","sourcesContent":["import {isArray, isObject} from 'js-type-check';\nimport ErrorFactory from 'simple-error-factory';\n\nconst SchemaError = ErrorFactory('schema');\n\nexport default function validateSchema(schema) {\n  /**\n   * Expects [schema1, schema2, ...]\n   * where schema is in form {type, field, ...}\n   * anything else will throw an error\n   */\n\n\n  if (!isArray(schema)) {\n    throw new TypeError;\n  }\n\n  let notObjects = schema.filter(s => isObject(s)).length !== schema.length;\n\n  if (notObjects) {\n    throw new TypeError;\n  }\n\n  // type and field required\n  // either required OR default, not both\n  let invalid = schema.filter(s => {\n    return (s.type && s.field) && !(s.required && s.default);\n  }).length !== schema.length;\n\n  if (invalid || schema.length === 0) {\n    throw SchemaError('Invalid schema');\n  }\n\n  return true;\n}\n"]}